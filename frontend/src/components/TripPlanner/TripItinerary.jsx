import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

const TripItinerary = ({ tripPlan, onEdit, onBook, onRegenerateTrip }) => {
  const navigate = useNavigate();
  const [expandedDay, setExpandedDay] = useState(1);
  const [showFeedback, setShowFeedback] = useState(false);

  const formatDate = (date) => {
    return new Date(date).toLocaleDateString("en-US", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const formatTime = (time) => {
    if (!time) return "";
    return new Date(`2000-01-01T${time}`).toLocaleTimeString("en-US", {
      hour: "numeric",
      minute: "2-digit",
      hour12: true,
    });
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
      maximumFractionDigits: 0,
    }).format(amount || 0);
  };

  const getCategoryIcon = (category) => {
    const icons = {
      sightseeing: "🏛️",
      food: "🍽️",
      shopping: "🛍️",
      adventure: "🏔️",
      culture: "🎭",
      relaxation: "🧘",
      transport: "🚗",
      experience: "✨",
      heritage: "🏰",
      nature: "🌿",
      beach: "🏖️",
      spiritual: "🕉️",
    };
    return icons[category] || "📍";
  };

  const getMealIcon = (mealType) => {
    const icons = {
      breakfast: "🌅",
      lunch: "☀️",
      dinner: "🌙",
      snack: "🥨",
    };
    return icons[mealType] || "🍽️";
  };

  const getConfidenceColor = (score) => {
    if (score >= 90) return "text-green-600 bg-green-50";
    if (score >= 80) return "text-blue-600 bg-blue-50";
    if (score >= 70) return "text-yellow-600 bg-yellow-50";
    return "text-orange-600 bg-orange-50";
  };

  const handleHotelClick = (hotelId, hotelName, destination) => {
    console.log("🏨 Hotel click - hotelId:", hotelId, "type:", typeof hotelId);
    console.log("🏨 Hotel click - hotelName:", hotelName);

    if (hotelId && typeof hotelId === "string" && hotelId.length === 24) {
      // Valid MongoDB ObjectId string
      console.log("✅ Valid hotel ID, navigating to details page");
      navigate(`/hotel/${hotelId}`);
    } else if (hotelId && typeof hotelId === "object") {
      // Hotel object was passed instead of ID
      console.log("🔧 Hotel object detected, extracting ID:", hotelId._id);
      if (hotelId._id) {
        navigate(`/hotel/${hotelId._id}`);
      } else {
        console.log("❌ No _id in hotel object, falling back to search");
        const searchParams = new URLSearchParams({
          city: destination.city,
          state: destination.state,
          search: hotelName || "",
          fromItinerary: "true",
        });
        navigate(`/hotels?${searchParams.toString()}`);
      }
    } else {
      // If no hotel ID, search for hotels in the destination with the suggested name
      console.log(
        "🏨 Hotel ID not available, searching for hotels in",
        destination.city
      );
      const searchParams = new URLSearchParams({
        city: destination.city,
        state: destination.state,
        search: hotelName || "",
        fromItinerary: "true",
      });
      navigate(`/hotels?${searchParams.toString()}`);
    }
  };

  const handleRegenerateWithChanges = () => {
    if (onRegenerateTrip) {
      onRegenerateTrip(tripPlan._id);
    }
  };

  return (
    <div className="max-w-6xl mx-auto bg-white rounded-xl shadow-lg overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-4xl font-bold mb-2">
              🗺️ Your AI-Generated Trip to {tripPlan.destination.city}
            </h1>
            <p className="text-blue-100 text-lg">
              {tripPlan.durationText} • {formatDate(tripPlan.dates.startDate)} -{" "}
              {formatDate(tripPlan.dates.endDate)}
            </p>
            <div className="flex items-center mt-2">
              <span
                className={`px-3 py-1 rounded-full text-sm font-medium ${getConfidenceColor(
                  tripPlan.summary.aiConfidenceScore
                )}`}
              >
                🤖 AI Confidence: {tripPlan.summary.aiConfidenceScore}%
              </span>
              <span className="ml-3 text-blue-100 text-sm">
                Generated by Gemini AI
              </span>
            </div>
          </div>

          <div className="text-right">
            <div className="text-3xl font-bold">
              {formatCurrency(tripPlan.summary.totalCost)}
            </div>
            <div className="text-blue-100 text-sm">Total Budget</div>
          </div>
        </div>

        {/* Summary Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
          <div className="bg-white/10 rounded-lg p-4 backdrop-blur-sm">
            <div className="text-2xl font-semibold">
              {formatCurrency(tripPlan.summary.accommodationCost)}
            </div>
            <div className="text-blue-100 text-sm">🏨 Accommodation</div>
          </div>
          <div className="bg-white/10 rounded-lg p-4 backdrop-blur-sm">
            <div className="text-2xl font-semibold">
              {formatCurrency(tripPlan.summary.activitiesCost)}
            </div>
            <div className="text-blue-100 text-sm">🎯 Activities</div>
          </div>
          <div className="bg-white/10 rounded-lg p-4 backdrop-blur-sm">
            <div className="text-2xl font-semibold">
              {formatCurrency(tripPlan.summary.foodCost)}
            </div>
            <div className="text-blue-100 text-sm">🍽️ Food</div>
          </div>
          <div className="bg-white/10 rounded-lg p-4 backdrop-blur-sm">
            <div className="text-2xl font-semibold">
              {tripPlan.travelers.adults + tripPlan.travelers.children}
            </div>
            <div className="text-blue-100 text-sm">👥 Travelers</div>
          </div>
        </div>

        {/* Trip Highlights */}
        {tripPlan.summary.highlights &&
          tripPlan.summary.highlights.length > 0 && (
            <div className="mt-6">
              <h3 className="text-lg font-semibold mb-3">✨ Trip Highlights</h3>
              <div className="flex flex-wrap gap-2">
                {tripPlan.summary.highlights.map((highlight, index) => (
                  <span
                    key={index}
                    className="bg-white/20 px-3 py-1 rounded-full text-sm"
                  >
                    {highlight}
                  </span>
                ))}
              </div>
            </div>
          )}
      </div>

      {/* Action Buttons */}
      <div className="p-6 border-b bg-gray-50">
        <div className="flex flex-wrap gap-3">
          <button
            onClick={() => onEdit && onEdit(tripPlan)}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center transition-colors"
          >
            ✏️ Customize Trip
          </button>
          <button
            onClick={() => onBook && onBook(tripPlan)}
            className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg flex items-center transition-colors"
          >
            🏨 Book Hotels
          </button>
          <button
            onClick={handleRegenerateWithChanges}
            className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg flex items-center transition-colors"
          >
            🔄 Regenerate with AI
          </button>
          <button
            onClick={() => window.print()}
            className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg flex items-center transition-colors"
          >
            🖨️ Print Itinerary
          </button>
          <button
            onClick={() => setShowFeedback(!showFeedback)}
            className="bg-orange-600 hover:bg-orange-700 text-white px-6 py-3 rounded-lg flex items-center transition-colors"
          >
            📝 Give Feedback
          </button>
        </div>
      </div>

      {/* Weather & Best Time Info */}
      {(tripPlan.summary.weatherInfo || tripPlan.summary.bestTimeToVisit) && (
        <div className="p-8 bg-gradient-to-br from-blue-100 via-cyan-50 to-teal-100 border-l-4 border-blue-500">
          <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <span className="bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent mr-3">
              ✨ Essential Travel Information
            </span>
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {tripPlan.summary.weatherInfo && (
              <div className="bg-white rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-blue-200">
                <div className="flex items-start">
                  <div className="bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full p-3 mr-4 shadow-md">
                    <span className="text-2xl">🌤️</span>
                  </div>
                  <div className="flex-1">
                    <h3 className="text-xl font-bold text-gray-900 mb-2 flex items-center">
                      Weather Forecast
                      <span className="ml-2 text-sm bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full">
                        Important
                      </span>
                    </h3>
                    <p className="text-gray-700 text-base leading-relaxed">
                      {tripPlan.summary.weatherInfo}
                    </p>
                  </div>
                </div>
              </div>
            )}

            {tripPlan.summary.bestTimeToVisit && (
              <div className="bg-white rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-green-200">
                <div className="flex items-start">
                  <div className="bg-gradient-to-r from-green-400 to-blue-500 rounded-full p-3 mr-4 shadow-md">
                    <span className="text-2xl">📅</span>
                  </div>
                  <div className="flex-1">
                    <h3 className="text-xl font-bold text-gray-900 mb-2 flex items-center">
                      Best Time to Visit
                      <span className="ml-2 text-sm bg-green-100 text-green-800 px-2 py-1 rounded-full">
                        Recommended
                      </span>
                    </h3>
                    <p className="text-gray-700 text-base leading-relaxed">
                      {tripPlan.summary.bestTimeToVisit}
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Additional visual emphasis */}
          <div className="mt-4 text-center">
            <div className="inline-flex items-center text-sm text-blue-700 bg-blue-50 rounded-full px-4 py-2">
              <svg
                className="w-4 h-4 mr-2"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                  clipRule="evenodd"
                />
              </svg>
              Plan your packing and activities accordingly
            </div>
          </div>
        </div>
      )}

      {/* Day-by-Day Itinerary */}
      <div className="p-6">
        <h2 className="text-3xl font-bold text-gray-900 mb-6">
          📅 Day-by-Day Itinerary
        </h2>

        {/* Day Navigation */}
        <div className="flex flex-wrap gap-2 mb-6">
          {tripPlan.itinerary.map((day) => (
            <button
              key={day.day}
              onClick={() => setExpandedDay(day.day)}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                expandedDay === day.day
                  ? "bg-blue-600 text-white"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              Day {day.day}
            </button>
          ))}
        </div>

        {/* Day Details */}
        {tripPlan.itinerary.map((day) => (
          <div
            key={day.day}
            className={`${expandedDay === day.day ? "block" : "hidden"}`}
          >
            <div className="border-l-4 border-blue-500 pl-6 mb-8">
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h3 className="text-2xl font-bold text-gray-900">
                    Day {day.day} - {day.title}
                  </h3>
                  <p className="text-gray-600 text-lg">
                    {formatDate(day.date)}
                  </p>
                  {day.description && (
                    <p className="text-gray-700 mt-2">{day.description}</p>
                  )}
                </div>
                <div className="text-right">
                  <div className="text-xl font-bold text-blue-600">
                    {formatCurrency(day.totalDayCost)}
                  </div>
                  <div className="text-gray-500 text-sm">Day Total</div>
                </div>
              </div>

              {/* Accommodation */}
              {day.accommodation && (
                <div className="bg-blue-50 rounded-xl p-6 mb-6">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <h4 className="flex items-center text-lg font-semibold text-gray-900 mb-2">
                        🏨 Accommodation
                      </h4>
                      <div className="text-gray-800 font-medium">
                        {day.accommodation.hotelName ||
                          "Hotel booking required"}
                      </div>
                      {day.accommodation.roomType && (
                        <div className="text-gray-600 text-sm">
                          Room: {day.accommodation.roomType}
                        </div>
                      )}
                      <div className="flex gap-4 mt-2 text-sm text-gray-600">
                        {day.accommodation.checkIn && (
                          <span>
                            Check-in: {formatTime(day.accommodation.checkIn)}
                          </span>
                        )}
                        {day.accommodation.checkOut && (
                          <span>
                            Check-out: {formatTime(day.accommodation.checkOut)}
                          </span>
                        )}
                      </div>
                    </div>
                    <div className="text-right ml-4">
                      <div className="text-xl font-bold text-gray-900">
                        {formatCurrency(day.accommodation.totalCost)}
                      </div>
                      <button
                        onClick={() =>
                          handleHotelClick(
                            day.accommodation.hotel,
                            day.accommodation.hotelName,
                            tripPlan.destination
                          )
                        }
                        className="text-blue-600 hover:text-blue-800 text-sm underline"
                      >
                        {day.accommodation.hotel
                          ? "View Hotel Details"
                          : "Find Similar Hotels"}{" "}
                        →
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* Activities Timeline */}
              <div className="space-y-4 mb-6">
                {day.activities &&
                  day.activities.map((activity, actIndex) => (
                    <div
                      key={actIndex}
                      className="bg-white border border-gray-200 rounded-xl p-6 shadow-sm hover:shadow-md transition-shadow"
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-3">
                            <span className="text-2xl">
                              {getCategoryIcon(activity.category)}
                            </span>
                            <div>
                              <h4 className="text-lg font-semibold text-gray-900">
                                {activity.title}
                              </h4>
                              <div className="flex items-center gap-4 text-sm text-gray-600">
                                {activity.time && (
                                  <span>🕐 {formatTime(activity.time)}</span>
                                )}
                                {activity.duration && (
                                  <span>⏱️ {activity.duration}h duration</span>
                                )}
                                {activity.category && (
                                  <span className="px-2 py-1 bg-gray-100 rounded-full text-xs">
                                    {activity.category}
                                  </span>
                                )}
                              </div>
                            </div>
                          </div>

                          {activity.description && (
                            <p className="text-gray-700 mb-3">
                              {activity.description}
                            </p>
                          )}

                          {activity.location && (
                            <p className="text-gray-600 text-sm mb-3">
                              📍 {activity.location.name}
                            </p>
                          )}

                          {activity.tips && activity.tips.length > 0 && (
                            <div className="mt-3">
                              <div className="text-sm font-medium text-gray-700 mb-1">
                                💡 Pro Tips:
                              </div>
                              <ul className="text-sm text-gray-600 space-y-1">
                                {activity.tips.map((tip, tipIndex) => (
                                  <li
                                    key={tipIndex}
                                    className="flex items-start"
                                  >
                                    <span className="text-blue-500 mr-2">
                                      •
                                    </span>
                                    {tip}
                                  </li>
                                ))}
                              </ul>
                            </div>
                          )}
                        </div>

                        <div className="text-right ml-6">
                          <div className="text-lg font-bold text-gray-900">
                            {formatCurrency(activity.estimatedCost)}
                          </div>
                          {activity.bookingRequired && (
                            <span className="inline-block text-xs text-orange-600 bg-orange-50 px-2 py-1 rounded-full mt-1">
                              Booking Required
                            </span>
                          )}
                          {activity.rating && (
                            <div className="flex items-center mt-1 text-sm">
                              <span className="text-yellow-500">⭐</span>
                              <span className="ml-1 text-gray-600">
                                {activity.rating}/5
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
              </div>

              {/* Meals */}
              {day.meals && day.meals.length > 0 && (
                <div className="bg-orange-50 rounded-xl p-6 mb-6">
                  <h4 className="text-lg font-semibold text-gray-900 mb-4">
                    🍽️ Recommended Meals
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {day.meals.map((meal, mealIndex) => (
                      <div key={mealIndex} className="bg-white rounded-lg p-4">
                        <div className="flex items-center gap-2 mb-2">
                          <span className="text-lg">
                            {getMealIcon(meal.type)}
                          </span>
                          <span className="font-medium capitalize">
                            {meal.type}
                          </span>
                        </div>
                        <div className="text-gray-800 font-medium">
                          {meal.restaurant}
                        </div>
                        <div className="text-gray-600 text-sm">
                          {meal.cuisine} cuisine
                        </div>
                        {meal.description && (
                          <div className="text-gray-600 text-sm mt-1">
                            {meal.description}
                          </div>
                        )}
                        <div className="text-right mt-2">
                          <span className="font-semibold">
                            {formatCurrency(meal.cost)}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Day Highlights */}
              {day.highlights && day.highlights.length > 0 && (
                <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6">
                  <h4 className="font-medium text-yellow-800 mb-2">
                    ✨ Day Highlights
                  </h4>
                  <ul className="text-yellow-700 text-sm space-y-1">
                    {day.highlights.map((highlight, index) => (
                      <li key={index}>• {highlight}</li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Day Notes */}
              {day.notes && (
                <div className="bg-gray-50 border-l-4 border-gray-400 p-4">
                  <h4 className="font-medium text-gray-800 mb-2">
                    📝 Additional Notes
                  </h4>
                  <p className="text-gray-600 text-sm">{day.notes}</p>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* General Tips */}
      {tripPlan.summary.tips && tripPlan.summary.tips.length > 0 && (
        <div className="p-6 border-t bg-green-50">
          <h3 className="text-xl font-semibold text-gray-900 mb-4">
            💡 General Travel Tips
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {tripPlan.summary.tips.map((tip, index) => (
              <div key={index} className="flex items-start">
                <span className="text-green-600 mr-3 mt-1">💡</span>
                <span className="text-gray-700">{tip}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Footer */}
      <div className="bg-gray-50 p-6 border-t">
        <div className="text-center">
          <p className="text-gray-600 mb-2">
            🤖 Generated by StayWise AI using Google Gemini
          </p>
          <p className="text-gray-500 text-sm">
            AI Confidence Score: {tripPlan.summary.aiConfidenceScore}% •
            Generated on{" "}
            {new Date(tripPlan.aiGenerated?.generatedAt).toLocaleDateString()}
          </p>
          <p className="text-gray-400 text-xs mt-2">
            This itinerary is AI-generated and prices may vary. Please verify
            details before booking.
          </p>
        </div>
      </div>
    </div>
  );
};

export default TripItinerary;
